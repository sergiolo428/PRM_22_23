(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     85848,       1742]
NotebookOptionsPosition[     36058,        842]
NotebookOutlinePosition[     82317,       1693]
CellTagsIndexPosition[     82274,       1690]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[StyleBox["Cargamos librer\[IAcute]a - Configuramos", \
"Subtitle"]], "Text",
 CellChangeTimes->{{3.8754122395578804`*^9, 3.8754122583886967`*^9}, {
  3.875412517523923*^9, 
  3.8754125238632193`*^9}},ExpressionUUID->"619d29ed-1ec1-452e-bed3-\
39bda5be48a2"],

Cell[BoxData[
 RowBox[{"Get", "[", 
  "\"\<C:\\\\Universidad\\\\PRM\\\\PRM_22_23\\\\Practica \
2\\\\drawTxPRM.m\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.875412260218151*^9, 3.875412331608157*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"5086b813-e46f-4226-b0c6-9550a79b6a63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "drawTxPRM`*"}]], "Input",
 CellChangeTimes->{{3.8754123380126314`*^9, 3.875412348817401*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"4d076e46-6bfa-412e-83a7-abba90229abc"],

Cell[BoxData[
 StyleBox[
  FrameBox[GridBox[{
     {
      DynamicModuleBox[{Typeset`open$$ = True}, 
       PaneSelectorBox[{False->
        ButtonBox[
         RowBox[{
          
          DynamicBox[FEPrivate`FrontEndResource[
           "FEBitmaps", "RightPointerOpener"]], " ", 
          StyleBox["drawTxPRM`", "InformationGridGroupHeader"]}],
         Appearance->None,
         BaseStyle->"InformationGridLink",
         ButtonFunction:>FEPrivate`Set[Typeset`open$$, True],
         Evaluator->Automatic,
         Method->"Preemptive"], True->
        PaneBox[GridBox[{
           {
            ButtonBox[
             RowBox[{
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], " ", 
              StyleBox["drawTxPRM`", "InformationGridGroupHeader"]}],
             Appearance->None,
             BaseStyle->"InformationGridLink",
             ButtonFunction:>FEPrivate`Set[Typeset`open$$, False],
             Evaluator->Automatic,
             Method->"Preemptive"]},
           {
            PaneBox[GridBox[{
               {
                ButtonBox[
                 StyleBox["DrawPacketTx", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-02c380ee-098e-4801-95d6-f48ecba5502b", {
                   "DrawPacketTx", "drawTxPRM`"}, False},
                 ButtonNote->"drawTxPRM`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["DrawWin", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-02c380ee-098e-4801-95d6-f48ecba5502b", {
                   "DrawWin", "drawTxPRM`"}, False},
                 ButtonNote->"drawTxPRM`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["GetIniParDraw", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-02c380ee-098e-4801-95d6-f48ecba5502b", {
                   "GetIniParDraw", "drawTxPRM`"}, False},
                 ButtonNote->"drawTxPRM`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SelectPacketInWin", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-02c380ee-098e-4801-95d6-f48ecba5502b", {
                   "SelectPacketInWin", "drawTxPRM`"}, False},
                 ButtonNote->"drawTxPRM`",
                 Evaluator->Automatic], 
                ButtonBox[
                 StyleBox["SetIniParDraw", "InformationGridButton"],
                 Appearance->None,
                 BaseStyle->"InformationGridLink",
                 
                 ButtonData:>{
                  "Info-02c380ee-098e-4801-95d6-f48ecba5502b", {
                   "SetIniParDraw", "drawTxPRM`"}, False},
                 ButtonNote->"drawTxPRM`",
                 Evaluator->Automatic]}
              },
              DefaultBaseStyle->"Text",
              
              GridBoxAlignment->{
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
              GridBoxItemSize->{"Columns" -> {{
                   Scaled[0.19]}}}],
             ImageMargins->{{10, 0}, {0, 2}}]}
          },
          GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
         FrameMargins->{{0, 0}, {8, 0}}]}, Dynamic[Typeset`open$$],
        ImageSize->Automatic]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"ColumnsIndexed" -> {{False}}, "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.8]}, 
        Offset[0.2]}}],
   BaseStyle->"InformationTitleFrame"], "InformationGridPlain"]], "Output",
 CellChangeTimes->{{3.875412349648287*^9, 3.8754123677325687`*^9}, 
   3.87541340302529*^9, 3.8754136116722555`*^9, 3.875413688781704*^9, 
   3.8754137211999264`*^9, {3.875413771730224*^9, 3.8754137948830156`*^9}, 
   3.8754138249811497`*^9, {3.875413896693281*^9, 3.875413912629588*^9}, 
   3.8754141927913847`*^9, {3.875414552175453*^9, 3.8754145633938894`*^9}, {
   3.875414664772777*^9, 3.875414704108466*^9}, 3.8756729068307*^9, {
   3.8756729693260255`*^9, 3.8756729928248987`*^9}, {3.875673072424329*^9, 
   3.8756730735392103`*^9}, 3.87567389339074*^9, 3.87567400946024*^9, 
   3.875674082827024*^9, 3.8756741244959574`*^9, {3.875674532489476*^9, 
   3.875674549631134*^9}, 3.875674712114667*^9, 3.875674883506016*^9, 
   3.876045689393944*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"5c710024-fcb4-43e7-8fae-46a6f0cbb6dd"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"tp", "=", "0.01"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ts", "=", "0.002"}], ";"}]}], "Input",
 CellChangeTimes->{{3.8756738381244764`*^9, 3.8756738582721186`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"ef064625-e223-4768-bd07-2f5f4c0b03bc"],

Cell[BoxData[
 RowBox[{"SetIniParDraw", "[", 
  RowBox[{"tp", ",", "ts"}], "]"}]], "Input",
 CellChangeTimes->{{3.875412528931058*^9, 3.8754125529040155`*^9}, {
   3.875412608954033*^9, 3.8754126097866583`*^9}, {3.875413605921238*^9, 
   3.8754136074225616`*^9}, {3.8754136803533964`*^9, 3.8754136967042313`*^9}, 
   3.8754137693349085`*^9, {3.875413822113328*^9, 3.8754138223542366`*^9}, {
   3.8754138939028273`*^9, 3.8754139095242524`*^9}, {3.875414189894808*^9, 
   3.8754141899847355`*^9}, {3.8756738628598523`*^9, 3.8756738671261497`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"fcbe3fb4-12c9-4655-b93e-bd4af5c6169d"],

Cell[TextData[StyleBox["Definimos funciones iniciales", "Subtitle"]], "Text",
 CellChangeTimes->{{3.8754121624446588`*^9, 
  3.8754121735687914`*^9}},ExpressionUUID->"1559810c-0f09-4d18-a721-\
a1d8e65386fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Fifo", "[", 
   RowBox[{"arr_", ",", "serv_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "time"}], "}"}], ",", 
    RowBox[{
     RowBox[{"n", "=", "0"}], ";", 
     RowBox[{"time", "=", 
      RowBox[{"arr", "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"n", "++"}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"time", ">=", "#"}], ",", 
            RowBox[{"time", "+=", 
             RowBox[{"serv", "[", 
              RowBox[{"[", "n", "]"}], "]"}]}], ",", 
            RowBox[{"time", "=", 
             RowBox[{"#", "+", 
              RowBox[{"serv", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}]}]}], "]"}]}], ")"}], "&"}], 
       ",", "arr"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8754117007812486`*^9, 3.8754117065588846`*^9}, {
  3.8754117463709354`*^9, 3.8754118368461313`*^9}, {3.8754119416006174`*^9, 
  3.875411972211631*^9}, {3.875412012261224*^9, 3.875412126897115*^9}, {
  3.8756736845344276`*^9, 3.87567372751528*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"ccc098a5-a8dd-4cab-a4c4-2ffebe86f72c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExpRnd", "[", "rate_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     RowBox[{"Log", "[", 
      RowBox[{"RandomReal", "[", "]"}], "]"}]}], "/", "rate"}], " ", "//", 
   "N"}]}]], "Input",
 CellChangeTimes->{{3.875412183551885*^9, 3.8754122179035077`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"91d94be0-79cc-4a1f-a3f1-3080663dbac7"],

Cell[TextData[StyleBox["Calculamos tiempos", "Subtitle"]], "Text",
 CellChangeTimes->{{3.8754126692941628`*^9, 
  3.8754126720638285`*^9}},ExpressionUUID->"de17e05a-5bd8-4aa3-8a6d-\
9aecf4fa4a09"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"landa", "=", "80"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"mu", "=", "100"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nm", "=", "10"}], ";"}]}], "Input",
 CellChangeTimes->{{3.875412686187723*^9, 3.875412710516035*^9}, {
   3.875414662269388*^9, 3.8754147003887415`*^9}, {3.875672943240301*^9, 
   3.8756729433940625`*^9}, 3.8756729888120966`*^9, {3.87567303536729*^9, 
   3.8756730355469275`*^9}, {3.875674065103139*^9, 3.8756740658915734`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"79f3cec0-b4eb-4dd7-906c-729db9d500c8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Interarrivals", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ExpRnd", "[", "landa", "]"}], ",", "nm"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Arrivals", "=", 
   RowBox[{"Accumulate", "[", "Interarrivals", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.8754127160926933`*^9, 3.8754128314693427`*^9}, 
   3.8756747648843927`*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"949ced95-726a-4ebc-8477-96363462ac29"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Service", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ExpRnd", "[", "mu", "]"}], ",", "nm"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8754127476566286`*^9, 3.8754127704250617`*^9}, {
  3.8754128353403416`*^9, 3.875412837988285*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"ef756c95-6dab-4f9c-8b0f-e85258f03093"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Departures", "=", 
   RowBox[{"Fifo", "[", 
    RowBox[{"Arrivals", ",", "Service"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8754128488712835`*^9, 3.8754128592672186`*^9}, {
  3.875673871319375*^9, 3.87567387162957*^9}, {3.875674004898531*^9, 
  3.8756740050460353`*^9}, {3.875674078612299*^9, 3.8756740789119606`*^9}, {
  3.875674120760746*^9, 3.8756741218048606`*^9}, {3.8756747021113195`*^9, 
  3.875674708405113*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"fd9fff31-82c7-484d-8324-e1dc186e1bc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Injections", "=", 
   RowBox[{"Departures", "-", "Service"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8754130175138*^9, 3.8754130353809395`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"1ca3e700-724d-438b-8734-d87600598a9a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"listaPaquetes", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Injections", "[", 
        RowBox[{"[", "n", "]"}], "]"}], ",", 
       RowBox[{"Service", "[", 
        RowBox[{"[", "n", "]"}], "]"}], ",", "n", ",", "0", ",", "0"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "nm"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.875413161128335*^9, 3.8754132292111783`*^9}, {
  3.8754132929076333`*^9, 3.875413293005951*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"f6a8870d-42ad-43c0-9f5b-18e0dcaad4c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"DrawWin", "[", 
    RowBox[{"0", ",", "0.3", ",", "8"}], "]"}], ",", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"DrawPacketTx", "[", "#", "]"}], ")"}], "&"}], ",", 
     "listaPaquetes"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8754130750266*^9, 3.875413097364458*^9}, {
  3.8754131309158883`*^9, 3.8754131557406282`*^9}, {3.875413237251545*^9, 
  3.87541325865334*^9}, {3.8754133136200013`*^9, 3.875413313897276*^9}, {
  3.8754133680271177`*^9, 3.8754133739772854`*^9}, {3.875413435657609*^9, 
  3.8754134401494927`*^9}, {3.8754134727275777`*^9, 3.875413472873914*^9}, {
  3.875413798138065*^9, 3.875413803313305*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"ac972871-ad1e-4074-a600-924e2c7bc259"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0], LineBox[{{0, 0}, {0.3, 0}}], 
    LineBox[{{0, 0.075}, {0.3, 0.075}}]}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.03691700678506483, 0}, {0.03694042193800003, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.03691700678506483, 0}, {0.04691700678506483, 0.075}}], 
     LineBox[{{0.03694042193800003, 0}, {0.046940421938000035`, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.046940421938000035, 0.075}, \
{0.04894042193800004, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.046940421938000035`, 0.075}, {0.05694042193800003, 0}}], 
       LineBox[{{0.04894042193800004, 0.075}, {0.05894042193800003, 0}}], 
       InsetBox["\<\"1\"\>", {0.041928714361532435, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.05385180925183025, 0}, {0.05450080759159524, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.05385180925183025, 0}, {0.06385180925183025, 0.075}}], 
     LineBox[{{0.05450080759159524, 0}, {0.06450080759159524, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.06450080759159524, 0.075}, \
{0.06650080759159524, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.06450080759159524, 0.075}, {0.07450080759159525, 0}}], 
       LineBox[{{0.06650080759159524, 0.075}, {0.07650080759159525, 0}}], 
       InsetBox["\<\"2\"\>", {0.059176308421712745, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.08562439671677471, 0}, {0.08609634374852178, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.08562439671677471, 0}, {0.09562439671677471, 0.075}}], 
     LineBox[{{0.08609634374852178, 0}, {0.09609634374852177, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.09609634374852177, 0.075}, \
{0.09809634374852177, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.09609634374852177, 0.075}, {0.10609634374852178`, 0}}], 
       LineBox[{{0.09809634374852177, 0.075}, {0.10809634374852178`, 0}}], 
       InsetBox["\<\"3\"\>", {0.09086037023264824, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.11636628981590207, 0}, {0.11647169345727428, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.11636628981590207`, 0}, {0.12636628981590206`, 0.075}}], 
     LineBox[{{0.11647169345727428`, 0}, {0.12647169345727427`, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.12647169345727427, 0.075}, \
{0.12847169345727427, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.12647169345727427`, 0.075}, {0.13647169345727428`, 0}}], 
       LineBox[{{0.12847169345727427`, 0.075}, {0.13847169345727428`, 0}}], 
       InsetBox["\<\"4\"\>", {0.12141899163658817, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.13239016452442967, 0}, {0.14835079836029152, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.13239016452442967`, 0}, {0.14239016452442968`, 0.075}}], 
     LineBox[{{0.14835079836029152`, 0}, {0.15835079836029153`, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.15835079836029153, 0.075}, \
{0.16035079836029154, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.15835079836029153`, 0.075}, {0.16835079836029151`, 0}}], 
       LineBox[{{0.16035079836029154`, 0.075}, {0.17035079836029152`, 0}}], 
       InsetBox["\<\"5\"\>", {0.1453704814423606, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.17547512214805963, 0}, {0.1784423017307255, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.17547512214805963`, 0}, {0.18547512214805964`, 0.075}}], 
     LineBox[{{0.1784423017307255, 0}, {0.18844230173072551`, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.18844230173072551, 0.075}, \
{0.19044230173072552, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.18844230173072551`, 0.075}, {0.1984423017307255, 0}}], 
       LineBox[{{0.19044230173072552`, 0.075}, {0.2004423017307255, 0}}], 
       InsetBox["\<\"6\"\>", {0.18195871193939256, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.18038489135833874, 0}, {0.18115538188749208, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.18038489135833874`, 0}, {0.19038489135833875`, 0.075}}], 
     LineBox[{{0.18115538188749208`, 0}, {0.1911553818874921, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.1911553818874921, 0.075}, \
{0.1931553818874921, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.1911553818874921, 0.075}, {0.20115538188749207`, 0}}], 
       LineBox[{{0.1931553818874921, 0.075}, {0.20315538188749208`, 0}}], 
       InsetBox["\<\"7\"\>", {0.18577013662291542, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.19379216379553232, 0}, {0.20040416108313513, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.19379216379553232`, 0}, {0.20379216379553233`, 0.075}}], 
     LineBox[{{0.20040416108313513`, 0}, {0.21040416108313514`, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.21040416108313514, 0.075}, \
{0.21240416108313512, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.21040416108313514`, 0.075}, {0.2204041610831351, 0}}], 
       LineBox[{{0.21240416108313512`, 0.075}, {0.2224041610831351, 0}}], 
       InsetBox["\<\"0\"\>", {0.20209816243933373, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.21822390660166593, 0}, {0.22555167814193441, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.21822390660166593`, 0}, {0.22822390660166594`, 0.075}}], 
     LineBox[{{0.22555167814193441`, 0}, {0.23555167814193442`, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.23555167814193442, 0.075}, \
{0.23755167814193442, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.23555167814193442`, 0.075}, {0.2455516781419344, 0}}], 
       LineBox[{{0.23755167814193442`, 0.075}, {0.2475516781419344, 0}}], 
       InsetBox["\<\"1\"\>", {0.22688779237180018, 0.0375}]}}}}, 
   {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
    RectangleBox[{0.26281780447442027, 0}, {0.2630146503291191, -0.0075}], 
    {Dashing[{Small, Small}], 
     LineBox[{{0.26281780447442027`, 0}, {0.2728178044744203, 0.075}}], 
     LineBox[{{0.2630146503291191, 0}, {0.2730146503291191, 0.075}}], 
     {RGBColor[1, 0.5, 0.5], EdgeForm[Thickness[Tiny]], 
      RectangleBox[{0.2730146503291191, 0.075}, \
{0.27501465032911904, 0.08249999999999999}], 
      {GrayLevel[0], Dashing[{Small, Small}], 
       LineBox[{{0.2730146503291191, 0.075}, {0.2830146503291191, 0}}], 
       LineBox[{{0.27501465032911904`, 0.075}, {0.28501465032911905`, 0}}], 
       InsetBox["\<\"2\"\>", {0.2679162274017697, 0.0375}]}}}}},
  AspectRatio->Automatic,
  Axes->{True, False},
  AxesOrigin->Automatic]], "Output",
 CellChangeTimes->{
  3.875413262165532*^9, {3.875413296972536*^9, 3.8754133157452393`*^9}, {
   3.87541336390747*^9, 3.8754134032903275`*^9}, {3.8754134373786726`*^9, 
   3.8754134418260407`*^9}, 3.875413474987492*^9, 3.875413611881567*^9, 
   3.8754136889885097`*^9, 3.8754137214950085`*^9, {3.875413771995346*^9, 
   3.8754138307307816`*^9}, {3.875413896899784*^9, 3.875413912844354*^9}, 
   3.8754141931197104`*^9, {3.8754145523938303`*^9, 3.875414563632823*^9}, {
   3.875414666025511*^9, 3.8754147043783197`*^9}, 3.875672906976909*^9, 
   3.8756729761048546`*^9, {3.875673060214143*^9, 3.875673074328977*^9}, {
   3.8756739835266495`*^9, 3.8756740102722473`*^9}, 3.8756740829800034`*^9, 
   3.8756741245803823`*^9, {3.875674532590197*^9, 3.875674549751251*^9}, 
   3.8756747121863527`*^9, 3.875674883556308*^9, 3.8760456894944067`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"d3a918ef-f737-4dc8-9f3d-877a7efec0c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"DrawWin", "[", 
      RowBox[{"ori", ",", "ww", ",", "8"}], "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"DrawPacketTx", "[", "#", "]"}], ")"}], "&"}], ",", 
       RowBox[{"SelectPacketInWin", "[", "listaPaquetes", "]"}]}], "]"}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"ori", ",", "0", ",", 
     RowBox[{"0.5", "-", "ww"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"ww", ",", "0.1", ",", "0.5", ",", "0.1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8754139374765296`*^9, 3.8754140296802373`*^9}, {
  3.8754140680197372`*^9, 3.8754140791110687`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"932aa8ad-aec9-4eb6-9c84-b36264498492"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`ori$$ = 
    0.27840000000000004`, $CellContext`ww$$ = 0.1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"sin t\[IAcute]tulo\"", Typeset`specs$$ = {{
      Hold[$CellContext`ori$$], 0, 
      Dynamic[0.5 - $CellContext`ww$$]}, {
      Hold[$CellContext`ww$$], 0.1, 0.5, 0.1}}, Typeset`size$$ = {
    360., {55., 59.69664890324265}}, Typeset`update$$ = 0, Typeset`initDone$$,
     Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`ori$$ = 0, $CellContext`ww$$ = 0.1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Show[
        drawTxPRM`DrawWin[$CellContext`ori$$, $CellContext`ww$$, 8], 
        Map[drawTxPRM`DrawPacketTx[#]& , 
         drawTxPRM`SelectPacketInWin[$CellContext`listaPaquetes]]], 
      "Specifications" :> {{$CellContext`ori$$, 0, 
         Dynamic[0.5 - $CellContext`ww$$]}, {$CellContext`ww$$, 0.1, 0.5, 
         0.1}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{637., {86.13403328722343, 91.86596671277657}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.875414010180851*^9, 3.875414049628812*^9, 3.875414080597074*^9, 
   3.8754141931997004`*^9, {3.875414552500925*^9, 3.8754145637139635`*^9}, {
   3.875414666138233*^9, 3.87541470444841*^9}, 3.8756729070165553`*^9, 
   3.875672976139341*^9, {3.875673060249256*^9, 3.875673074351905*^9}, 
   3.875674010309452*^9, 3.875674083090252*^9, 3.8756741246224685`*^9, {
   3.8756745326152887`*^9, 3.8756745497946863`*^9}, 3.8756747122206836`*^9, 
   3.8756748835858464`*^9, {3.87604568655521*^9, 3.8760456895523973`*^9}},
 CellLabel->"Out[19]=",ExpressionUUID->"cfb57b48-ac8d-4048-a63f-212d07361c65"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ThrughtPut", "[", "lst_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Last", "[", "lst", "]"}], "[", 
     RowBox[{"[", "3", "]"}], "]"}], "/", 
    RowBox[{
     RowBox[{"Last", "[", "lst", "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "//", "N"}]}]], "Input",
 CellChangeTimes->{{3.875414463670045*^9, 3.8754145207631197`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"1d4f34a5-070e-4083-992b-e0bd483e70ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ThrughtPut", "[", "listaPaquetes", "]"}]], "Input",
 CellChangeTimes->{{3.8754145263142815`*^9, 3.875414535963252*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"a6d169ef-8ad2-4033-ab57-24902d3c47a1"],

Cell[BoxData["38.04917258173538`"], "Output",
 CellChangeTimes->{{3.87541453712617*^9, 3.8754145639338427`*^9}, {
   3.875414666398254*^9, 3.8754147046729093`*^9}, 3.875672907115947*^9, 
   3.8756729765843487`*^9, {3.8756730641060762`*^9, 3.8756730744559765`*^9}, 
   3.8756740104506674`*^9, 3.8756740834763947`*^9, 3.8756741247082076`*^9, {
   3.8756745326977277`*^9, 3.875674549899717*^9}, 3.875674712321997*^9, 
   3.875674883669719*^9, 3.8760456896734753`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"8da0cad6-6fc2-4cc9-9051-7c4aa9f2999f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "3", "]"}], "]"}], "/", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], ",", 
    "listaPaquetes"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8754146068514214`*^9, 3.875414631948473*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"29b9d85e-bf3c-447b-b395-e6c098fec479"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`], 
    AbsoluteThickness[1.6], 
    PointBox[{{1., 27.08778655382648}, {2., 37.138956476787754`}, {3., 
     35.03674320676724}, {4., 34.374216161125545`}, {5., 37.76715602674065}, {
     6., 34.19288117057081}, {7., 38.805910779380845`}, {8., 
     41.281338952594076`}, {9., 41.242044192839565`}, {10., 
     38.04917258173538}}]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 26.299255865006113`},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 10.}, {26.299255865006113`, 41.281338952594076`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.875414634794243*^9, {3.8754146665582542`*^9, 3.875414704758005*^9}, 
   3.875672907514186*^9, 3.875672977860682*^9, {3.8756730722385893`*^9, 
   3.875673074559361*^9}, 3.8756740105625734`*^9, 3.875674083543952*^9, 
   3.8756741247347565`*^9, {3.8756745327361917`*^9, 3.875674550618762*^9}, 
   3.875674712372094*^9, 3.875674883703017*^9, 3.876045690484844*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"96e811f7-d3a2-4ef8-9a21-f5165d0b99d0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Delay", "[", 
   RowBox[{"lst1_", ",", "lst2_"}], "]"}], ":=", 
  RowBox[{"Mean", "[", 
   RowBox[{"lst2", "-", "lst1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.875414818059428*^9, 3.875414831378984*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"ddcd7f34-bcf8-425a-a981-178474c0aa61"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Delay", "[", 
  RowBox[{"Arrivals", ",", "Injections"}], "]"}]], "Input",
 CellChangeTimes->{{3.8754148352686605`*^9, 3.875414843439615*^9}, {
  3.8754148989032*^9, 3.8754149181222105`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"307aa09f-2cbb-47d1-8e04-0b5e118c32c2"],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{{3.87541490282664*^9, 3.8754149195973845`*^9}, 
   3.8756729076295123`*^9, 3.8756729781070423`*^9, {3.8756730723133173`*^9, 
   3.875673074603547*^9}, 3.87567401057964*^9, 3.8756740835751305`*^9, 
   3.87567412474584*^9, {3.8756745327543116`*^9, 3.87567455066245*^9}, 
   3.8756747126440544`*^9, 3.8756748839203405`*^9, 3.876045690626463*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"d467a711-d1bf-4c8f-a711-cb96a976e1df"]
}, Open  ]],

Cell[CellGroupData[{

Cell["---------- Caso Stop and Wait ----------", "Subtitle",
 CellChangeTimes->{{3.875674671009285*^9, 
  3.8756746881112175`*^9}},ExpressionUUID->"52b10f52-58df-43b0-90ec-\
7e88827fad75"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FifoSW", "[", 
   RowBox[{"arr_", ",", "serv_", ",", "tp_", ",", "ts_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "time"}], "}"}], ",", 
    RowBox[{
     RowBox[{"n", "=", "0"}], ";", 
     RowBox[{"time", "=", 
      RowBox[{
       RowBox[{"arr", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "-", 
       RowBox[{"2", "*", "tp"}], "-", "ts"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"n", "++"}], ";", 
          RowBox[{"time", "+=", 
           RowBox[{
            RowBox[{"2", "*", "tp"}], "+", "ts"}]}], ";", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"time", ">=", "#"}], ",", 
            RowBox[{"time", "+=", 
             RowBox[{"serv", "[", 
              RowBox[{"[", "n", "]"}], "]"}]}], ",", 
            RowBox[{"time", "=", 
             RowBox[{"#", "+", 
              RowBox[{"serv", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}]}]}], "]"}]}], ")"}], "&"}], 
       ",", "arr"}], "]"}]}]}], "]"}]}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"57838a45-1632-4da1-b1ca-fb41423f217d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Interarrivals", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ExpRnd", "[", "landa", "]"}], ",", "nm"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Arrivals", "=", 
   RowBox[{"Accumulate", "[", "Interarrivals", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Service", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"ExpRnd", "[", "mu", "]"}], ",", "nm"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.875674794421732*^9, 3.8756748223312664`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"05106e43-aec9-4435-a441-d5cc9a70f338"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Departures", "=", 
   RowBox[{"FifoSW", "[", 
    RowBox[{"Arrivals", ",", "Service", ",", "tp", ",", "ts"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8756748762423754`*^9, 3.875674879839752*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"b9eeb605-2c50-4333-a584-e7c9980605ce"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Injections", "=", 
   RowBox[{"Departures", "-", "Service"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8754130175138*^9, 3.8754130353809395`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"5a9d3d91-e898-40cb-af0e-bf6af07c0520"],

Cell[BoxData[
 RowBox[{
  RowBox[{"listaPaquetes", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Injections", "[", 
        RowBox[{"[", "n", "]"}], "]"}], ",", 
       RowBox[{"Service", "[", 
        RowBox[{"[", "n", "]"}], "]"}], ",", "n", ",", "0", ",", "0"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "nm"}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.875413161128335*^9, 3.8754132292111783`*^9}, {
  3.8754132929076333`*^9, 3.875413293005951*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"0f2af3b3-9d8e-4ffe-8d96-dbb40d2e2207"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{
     RowBox[{"DrawWin", "[", 
      RowBox[{"ori", ",", "ww", ",", "8"}], "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"DrawPacketTx", "[", "#", "]"}], ")"}], "&"}], ",", 
       RowBox[{"SelectPacketInWin", "[", "listaPaquetes", "]"}]}], "]"}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"ori", ",", "0", ",", 
     RowBox[{"0.5", "-", "ww"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"ww", ",", "0.1", ",", "0.5", ",", "0.1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8754139374765296`*^9, 3.8754140296802373`*^9}, {
  3.8754140680197372`*^9, 3.8754140791110687`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"d9f8eb94-e389-4dcf-b64a-e0b1164e7dbf"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`ori$$ = 0, $CellContext`ww$$ = 0.1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"sin t\[IAcute]tulo\"", Typeset`specs$$ = {{
      Hold[$CellContext`ori$$], 0, 
      Dynamic[0.5 - $CellContext`ww$$]}, {
      Hold[$CellContext`ww$$], 0.1, 0.5, 0.1}}, Typeset`size$$ = {
    360., {56., 59.78261760902407}}, Typeset`update$$ = 0, Typeset`initDone$$,
     Typeset`skipInitDone$$ = True}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`ori$$ = 0, $CellContext`ww$$ = 0.1}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Show[
        drawTxPRM`DrawWin[$CellContext`ori$$, $CellContext`ww$$, 8], 
        Map[drawTxPRM`DrawPacketTx[#]& , 
         drawTxPRM`SelectPacketInWin[$CellContext`listaPaquetes]]], 
      "Specifications" :> {{$CellContext`ori$$, 0, 
         Dynamic[0.5 - $CellContext`ww$$]}, {$CellContext`ww$$, 0.1, 0.5, 
         0.1}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{637., {86.13403328722343, 91.86596671277657}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.875674883978166*^9, 3.8760456907016497`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"11ba9819-7968-4eea-ae17-ca2520b4c3be"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1141.2, 574.8},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], 
             Appearance -> {
              "Default" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True], 
               "Pressed" -> 
               Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 
                  0, 0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 
                  0, 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 
                  255}, {255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                 ImageResolution -> {72, 72}, Interleaving -> True]}, 
             BaselinePosition -> Baseline, 
             ButtonFunction :> (
              If[OptionValue[{
                  ImageSize -> {Automatic, 19}, 
                   FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                   Baseline, Alignment -> {Center, Center}, Method -> 
                   "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                   "TextHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                   "BackHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                   CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                   "EdgeHoverColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                   CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
                False, 
                CodeInspector`LinterUI`Private`attachAnalysisAction[
                 EvaluationNotebook[]]]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = False), 
             ContentPadding -> False, Evaluator -> Automatic, Method -> 
             "Queued"], DynamicModuleValues :> {}], False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], 
            Appearance -> {
             "Default" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Hover" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True], "Pressed" -> 
              Image[RawArray["UnsignedInteger8",{{{255, 255, 255, 255}, {0, 0,
                  0, 255}, {255, 255, 255, 255}}, {{0, 0, 0, 255}, {0, 0, 0, 
                 0}, {0, 0, 0, 255}}, {{255, 255, 255, 255}, {0, 0, 0, 255}, {
                 255, 255, 255, 255}}}], "Byte", ColorSpace -> "RGB", 
                ImageResolution -> {72, 72}, Interleaving -> True]}, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[
           LinterUIDockedCell`Private`dockedCellMenuItem[
            LinterUIDockedCell`Private`notebook, #]& , 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`notebook, 
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          
          Names[(CodeInspector`LinterUI`Private`varNameString[
             CodeInspector`LinterUI`Private`notebook] <> "*") <> 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`nameArguments, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> "*"]], 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`nameArguments, 
            BlankSequence[]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := ((
           "CodeInspector`LinterUI`Private`Vars`" <> "$$") <> 
          With[{CodeInspector`LinterUI`Private`nbID = 
             Last[CodeInspector`LinterUI`Private`notebook]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`nbID], 
             StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`nbID]]]) <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
            Replace[
             ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
             EvaluationNotebook[]]] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := (
          CodeInspector`LinterUI`Private`varNameString[
           CodeInspector`LinterUI`Private`notebook] <> 
          With[{CodeInspector`LinterUI`Private`cellID = 
             First[CodeInspector`LinterUI`Private`cell]}, 
            If[
             StringQ[CodeInspector`LinterUI`Private`cellID], 
             StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
             ToString[CodeInspector`LinterUI`Private`cellID]]]) <> "$$", Null,
         CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook, 
           CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`nameArguments, 
           BlankSequence[]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := ((
           CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`nameArguments] <> Apply[Sequence, 
             Riffle[
              Map[StringDelete[
                ToString[#], 
                Alternatives["[", "]", "{", "}", ",", " "]]& , 
               CodeInspector`LinterUI`Private`extractFirstList[
                Last[CodeInspector`LinterUI`Private`lint][
                CodeParser`Source]]], "$"]]) <> "$$") <> 
         CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
FrontEndVersion->"13.1 para Microsoft Windows (64-bit) (August 22, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b3e43dff-d714-4a49-8dcb-da7fdbf2d085"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 271, 5, 46, "Text",ExpressionUUID->"619d29ed-1ec1-452e-bed3-39bda5be48a2"],
Cell[832, 27, 278, 5, 43, "Input",ExpressionUUID->"5086b813-e46f-4226-b0c6-9550a79b6a63"],
Cell[CellGroupData[{
Cell[1135, 36, 200, 3, 28, "Input",ExpressionUUID->"4d076e46-6bfa-412e-83a7-abba90229abc"],
Cell[1338, 41, 5134, 118, 95, "Output",ExpressionUUID->"5c710024-fcb4-43e7-8fae-46a6f0cbb6dd"]
}, Open  ]],
Cell[6487, 162, 294, 6, 48, "Input",ExpressionUUID->"ef064625-e223-4768-bd07-2f5f4c0b03bc"],
Cell[6784, 170, 623, 9, 28, "Input",ExpressionUUID->"fcbe3fb4-12c9-4655-b93e-bd4af5c6169d"],
Cell[7410, 181, 207, 3, 46, "Text",ExpressionUUID->"1559810c-0f09-4d18-a721-a1d8e65386fb"],
Cell[7620, 186, 1304, 34, 78, "Input",ExpressionUUID->"ccc098a5-a8dd-4cab-a4c4-2ffebe86f72c"],
Cell[8927, 222, 382, 10, 43, "Input",ExpressionUUID->"91d94be0-79cc-4a1f-a3f1-3080663dbac7"],
Cell[9312, 234, 196, 3, 46, "Text",ExpressionUUID->"de17e05a-5bd8-4aa3-8a6d-9aecf4fa4a09"],
Cell[9511, 239, 586, 11, 67, "Input",ExpressionUUID->"79f3cec0-b4eb-4dd7-906c-729db9d500c8"],
Cell[10100, 252, 485, 12, 78, "Input",ExpressionUUID->"949ced95-726a-4ebc-8477-96363462ac29"],
Cell[10588, 266, 369, 8, 43, "Input",ExpressionUUID->"ef756c95-6dab-4f9c-8b0f-e85258f03093"],
Cell[10960, 276, 544, 10, 28, "Input",ExpressionUUID->"fd9fff31-82c7-484d-8324-e1dc186e1bc6"],
Cell[11507, 288, 260, 5, 28, "Input",ExpressionUUID->"1ca3e700-724d-438b-8734-d87600598a9a"],
Cell[11770, 295, 627, 16, 43, "Input",ExpressionUUID->"f6a8870d-42ad-43c0-9f5b-18e0dcaad4c1"],
Cell[CellGroupData[{
Cell[12422, 315, 811, 17, 43, "Input",ExpressionUUID->"ac972871-ad1e-4074-a600-924e2c7bc259"],
Cell[13236, 334, 8414, 139, 132, "Output",ExpressionUUID->"d3a918ef-f737-4dc8-9f3d-877a7efec0c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[21687, 478, 825, 22, 43, "Input",ExpressionUUID->"932aa8ad-aec9-4eb6-9c84-b36264498492"],
Cell[22515, 502, 2501, 47, 197, "Output",ExpressionUUID->"cfb57b48-ac8d-4048-a63f-212d07361c65"]
}, Open  ]],
Cell[25031, 552, 469, 12, 43, "Input",ExpressionUUID->"1d4f34a5-070e-4083-992b-e0bd483e70ba"],
Cell[CellGroupData[{
Cell[25525, 568, 222, 3, 28, "Input",ExpressionUUID->"a6d169ef-8ad2-4033-ab57-24902d3c47a1"],
Cell[25750, 573, 543, 7, 32, "Output",ExpressionUUID->"8da0cad6-6fc2-4cc9-9051-7c4aa9f2999f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26330, 585, 476, 13, 43, "Input",ExpressionUUID->"29b9d85e-bf3c-447b-b395-e6c098fec479"],
Cell[26809, 600, 1913, 45, 238, "Output",ExpressionUUID->"96e811f7-d3a2-4ef8-9a21-f5165d0b99d0"]
}, Open  ]],
Cell[28737, 648, 320, 7, 43, "Input",ExpressionUUID->"ddcd7f34-bcf8-425a-a981-178474c0aa61"],
Cell[CellGroupData[{
Cell[29082, 659, 293, 5, 28, "Input",ExpressionUUID->"307aa09f-2cbb-47d1-8e04-0b5e118c32c2"],
Cell[29378, 666, 471, 6, 32, "Output",ExpressionUUID->"d467a711-d1bf-4c8f-a711-cb96a976e1df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29886, 677, 188, 3, 53, "Subtitle",ExpressionUUID->"52b10f52-58df-43b0-90ec-7e88827fad75"],
Cell[30077, 682, 1242, 35, 133, "Input",ExpressionUUID->"57838a45-1632-4da1-b1ca-fb41423f217d"],
Cell[31322, 719, 631, 18, 114, "Input",ExpressionUUID->"05106e43-aec9-4435-a441-d5cc9a70f338"],
Cell[31956, 739, 320, 7, 28, "Input",ExpressionUUID->"b9eeb605-2c50-4333-a584-e7c9980605ce"],
Cell[32279, 748, 260, 5, 28, "Input",ExpressionUUID->"5a9d3d91-e898-40cb-af0e-bf6af07c0520"],
Cell[32542, 755, 627, 16, 43, "Input",ExpressionUUID->"0f2af3b3-9d8e-4ffe-8d96-dbb40d2e2207"],
Cell[CellGroupData[{
Cell[33194, 775, 825, 22, 43, "Input",ExpressionUUID->"d9f8eb94-e389-4dcf-b64a-e0b1164e7dbf"],
Cell[34022, 799, 2008, 39, 197, "Output",ExpressionUUID->"11ba9819-7968-4eea-ae17-ca2520b4c3be"]
}, Open  ]]
}, Open  ]]
}
]
*)

