(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     78770,       1851]
NotebookOptionsPosition[     77420,       1801]
NotebookOutlinePosition[     78057,       1826]
CellTagsIndexPosition[     78014,       1823]
WindowTitle->Huffman Coding - Source
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Huffman Coding", "Section",
 CellFrame->{{0, 0}, {0, 0}},
 ShowCellBracket->False,
 FontColor->RGBColor[0.597406, 0, 0.0527047]],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1: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
FP/69esnAAAAAAAAAAAAwM74B4thROM=
   "], {{0, 0}, {1800, 25}}, {0, 255},
   ColorFunction->RGBColor],
  ImageSize->{1800, 25},
  PlotRange->{{0, 1800}, {0, 25}}]], "Section",
 CellFrame->{{0, 0}, {0, 0}},
 ShowCellBracket->False],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "digitizer2", ",", "freqs", ",", "freqTable", ",", "tree", ",", 
       "revTree", ",", "withDigits", ",", "firstTwoWithDigits", ",", 
       "withCharacters", ",", "withCharacters2", ",", "code", ",", 
       "codeWfreq", ",", "codeStrings", ",", "colorCoder", ",", "positions", 
       ",", "codedChars", ",", "coded", ",", "subTrees", ",", "subCodes", ",",
        "j", ",", "digitizer3", ",", "subTree", ",", "revSubTree", ",", 
       "withDigitsSubTree", ",", "firstTwoWithDigitsSubTree", ",", 
       "withCharactersSubTree", ",", "subCode"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"wordType", "\[Equal]", "1"}], ",", 
        RowBox[{"wordLength", "=", 
         RowBox[{"StringLength", "[", 
          RowBox[{"words", "[", 
           RowBox[{"[", "w", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"wordLength", "=", 
         RowBox[{"StringLength", "[", "randomWord", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"digitizer2", "[", "x_", "]"}], ":=", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{"x", ",", 
         RowBox[{"Flatten", "[", 
          RowBox[{"Join", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"x", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<0\>\"", ",", "Bold", ",", 
                  RowBox[{"colorList", "[", 
                   RowBox[{"[", "step", "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
             RowBox[{"2", "\[Rule]", 
              RowBox[{"Append", "[", 
               RowBox[{
                RowBox[{"x", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<1\>\"", ",", "Bold", ",", 
                  RowBox[{"colorList", "[", 
                   RowBox[{"[", "step", "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"i", "\[Rule]", 
                RowBox[{"Append", "[", 
                 RowBox[{
                  RowBox[{"x", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"Style", "[", 
                   RowBox[{"\"\< \>\"", ",", "Bold"}], "]"}]}], "]"}]}], ",", 
               
               RowBox[{"{", 
                RowBox[{"i", ",", "3", ",", 
                 RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}], "}"}],
            "]"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"freqs", "=", 
       RowBox[{"frequencies", "[", 
        RowBox[{"[", "f", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"freqTable", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"characters", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"freqs", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "characters", "]"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"tree", "=", 
       RowBox[{"NestList", "[", 
        RowBox[{"comp2", ",", 
         RowBox[{"sorter", "[", "freqTable", "]"}], ",", "5"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"revTree", "=", 
       RowBox[{"Reverse", "[", "tree", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"withDigits", "=", 
       RowBox[{"digitizer", "/@", 
        RowBox[{"Drop", "[", 
         RowBox[{"revTree", ",", "1"}], "]"}]}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"firstTwoWithDigits", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"drop2nd", ",", 
         RowBox[{"take2", "/@", "withDigits"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"withCharacters", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"getCharacters", ",", "firstTwoWithDigits", ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"withCharacters2", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"withCharacters", ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"code", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"characters", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"take2nd", "/@", 
             RowBox[{"Select", "[", 
              RowBox[{"withCharacters2", ",", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"characters", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
            "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "characters", "]"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"codeWfreq", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"characters", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", 
           RowBox[{"freqs", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"take2nd", "/@", 
             RowBox[{"Select", "[", 
              RowBox[{"withCharacters2", ",", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", 
                  RowBox[{"characters", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}], 
            "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "characters", "]"}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"codeStrings", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"take2nd", "/@", "code"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"wordType", "\[Equal]", "1"}], ",", 
        RowBox[{"chars", "=", 
         RowBox[{"Characters", "[", 
          RowBox[{"words", "[", 
           RowBox[{"[", "w", "]"}], "]"}], "]"}]}], ",", 
        RowBox[{"chars", "=", 
         RowBox[{"Characters", "[", "randomWord", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"colorCoder", "=", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"EvenQ", "[", "j", "]"}], ",", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "/.", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "j", "]"}], "]"}], "->", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "j", "]"}], "]"}], ",", "Blue"}], "]"}]}], 
              ")"}]}], ",", 
            RowBox[{"#", "[", 
             RowBox[{"[", "j", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"j", ",", "1", ",", 
            RowBox[{"Length", "[", "chars", "]"}]}], "}"}]}], "]"}], "&"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"positions", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Position", "[", 
           RowBox[{"characters", ",", 
            RowBox[{"chars", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "wordLength"}], "}"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"codedChars", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"codeStrings", ",", 
            RowBox[{"{", 
             RowBox[{"positions", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "wordLength"}], "}"}]}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"colorCoder", "[", "codedChars", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"coded", "=", 
       RowBox[{"StringJoin", "[", "codedChars", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"subTrees", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"NestList", "[", 
          RowBox[{"comp2", ",", 
           RowBox[{"sorter", "[", "freqTable", "]"}], ",", "i"}], "]"}], ",", 
         
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", "5"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"subCodes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"j", "=", "1"}], ",", 
        RowBox[{"j", "\[LessEqual]", "5"}], ",", 
        RowBox[{"j", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"digitizer3", "[", "x_", "]"}], ":=", "\[IndentingNewLine]", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"x", ",", 
            RowBox[{"Flatten", "[", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"Join", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"k", ",", "1"}], "}"}], "\[Rule]", 
                   RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"x", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<0\>\"", ",", "Bold", ",", 
                    RowBox[{"colorList", "[", 
                    RowBox[{"[", 
                    RowBox[{"j", "-", "k", "+", "1"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"k", ",", "2"}], "}"}], "\[Rule]", 
                   RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"x", "[", 
                    RowBox[{"[", 
                    RowBox[{"k", ",", "2"}], "]"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<1\>\"", ",", "Bold", ",", 
                    RowBox[{"colorList", "[", 
                    RowBox[{"[", 
                    RowBox[{"j", "-", "k", "+", "1"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}]}], ",", 
                  RowBox[{"Table", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"k", ",", "i"}], "}"}], "\[Rule]", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"x", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< \>\"", ",", "Bold"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "3", ",", 
                    RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}]}], 
                 "}"}], "]"}], "  ", ",", 
               RowBox[{"{", 
                RowBox[{"k", ",", "1", ",", 
                 RowBox[{"Length", "[", "x", "]"}]}], "}"}]}], "]"}], 
             "            ", "]"}]}], "       ", "]"}]}], "   ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"subTree", "=", 
          RowBox[{"subTrees", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"revSubTree", "=", 
          RowBox[{"Reverse", "[", "subTree", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"withDigitsSubTree", "=", 
          RowBox[{"digitizer3", "[", 
           RowBox[{"Drop", "[", 
            RowBox[{"revSubTree", ",", "1"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"firstTwoWithDigitsSubTree", "=", 
          RowBox[{"Map", "[", 
           RowBox[{"drop2nd", ",", 
            RowBox[{"take2", "/@", "withDigitsSubTree"}], ",", 
            RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"withCharactersSubTree", "=", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"getCharacters", ",", "firstTwoWithDigitsSubTree", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "1"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"subCode", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"characters", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"Row", "[", 
               RowBox[{"Flatten", "[", 
                RowBox[{"take2nd", "/@", 
                 RowBox[{"Select", "[", 
                  RowBox[{"withCharactersSubTree", ",", 
                   RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"characters", "[", 
                    RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}],
                 "]"}], "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "characters", "]"}]}], "}"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"subCodes", "=", 
          RowBox[{"Append", "[", 
           RowBox[{"subCodes", ",", "subCode"}], "]"}]}]}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Text", "@", 
       RowBox[{"Pane", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"st", ",", "\[IndentingNewLine]", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<Step \>\"", ",", "step", ",", 
                   "\"\< of the procedure to find the Huffman code:\>\""}], 
                  "}"}], "]"}], ",", "Bold", ",", "18"}], "]"}], ",", 
              "\[IndentingNewLine]", "\"\<\>\"", ",", "\[IndentingNewLine]", 
              RowBox[{"Pane", "[", 
               RowBox[{
                RowBox[{"Grid", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"TableForm", "[", 
                    RowBox[{
                    RowBox[{"digitizer2", "[", 
                    RowBox[{"tree", "[", 
                    RowBox[{"[", "step", "]"}], "]"}], "]"}], ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<letters  \>\"", ",", "\"\<weight \>\"", ",", 
                    "\"\<digit\>\""}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"TableSpacing", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", ".8"}], "}"}]}]}], "]"}], ",", "20"}], 
                    "]"}], ",", 
                    RowBox[{"Item", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< \[Rule]  \>\"", ",", "20"}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}], ",", 
                    
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"TableForm", "[", 
                    RowBox[{
                    RowBox[{"tree", "[", 
                    RowBox[{"[", 
                    RowBox[{"step", "+", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<letters       \>\"", ",", "\"\<weight\>\""}],
                     "}"}]}], "}"}]}], ",", 
                    RowBox[{"TableSpacing", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"1", "/", "2"}]}], "}"}]}]}], "]"}], ",", "20"}], 
                    "]"}]}], "}"}], "}"}], ",", 
                  RowBox[{"Alignment", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"Left", ",", "Top"}], "}"}]}]}], "]"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"580", ",", "200"}], "}"}]}]}], "]"}], ",", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"Framed", "[", 
               RowBox[{"Grid", "[", 
                RowBox[{"{", 
                 RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"step", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"TableForm", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"characters", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<\>\""}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", "1", ",", "6"}], "}"}]}], "]"}], ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<code\>\"", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<before step \>\"", ",", "step"}], "}"}], 
                    "]"}]}], "    ", "}"}]}], "}"}]}], ",", 
                    RowBox[{"TableSpacing", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", ".25"}], "}"}]}]}], "]"}], ",", "20"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"TableForm", "[", 
                    RowBox[{
                    RowBox[{"subCodes", "[", 
                    RowBox[{"[", 
                    RowBox[{"step", "-", "1"}], "]"}], "]"}], ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<code\>\"", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<before step \>\"", ",", "step"}], "}"}], 
                    "]"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"TableSpacing", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", ".25"}], "}"}]}]}], "]"}], ",", "20"}], 
                    "]"}]}], "]"}], " ", ",", "\[IndentingNewLine]", 
                   RowBox[{"Item", "[", 
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< \[Rule]  \>\"", ",", "20"}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Bottom"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"TableForm", "[", 
                    RowBox[{
                    RowBox[{"subCodes", "[", 
                    RowBox[{"[", "step", "]"}], "]"}], ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<code\>\"", ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<after step \>\"", ",", "step"}], "}"}], 
                    "]"}]}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"TableSpacing", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", ".25"}], "}"}]}]}], "]"}], ",", "20"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "}"}], "]"}], 
               "      ", "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Column", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"TableForm", "[", 
                 RowBox[{"code", ",", 
                  RowBox[{"TableHeadings", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"None", ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<letter\>\"", ",", "\"\<code\>\""}], "}"}]}], 
                    "}"}]}]}], "]"}], ",", "20"}], "]"}], ",", 
              "\[IndentingNewLine]", "\"\<\>\"", ",", "\"\<\>\"", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Style", "[", 
               RowBox[{
                RowBox[{"Row", "[", 
                 RowBox[{"{", "\"\<Decode this string:\>\"", "}"}], "]"}], 
                ",", "20"}], "]"}], ",", "\[IndentingNewLine]", "\"\<\>\"", 
              ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"sc", ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"colorCoder", "[", "codedChars", "]"}], "]"}], ",",
                   "Bold", ",", "36"}], "]"}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"coded", ",", "Bold", ",", "36"}], "]"}]}], "]"}], 
              ",", "\[IndentingNewLine]", "\[IndentingNewLine]", "\"\<\>\"", 
              ",", "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{"sc", ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"wordType", "\[Equal]", "1"}], ",", 
                    RowBox[{"words", "[", 
                    RowBox[{"[", "w", "]"}], "]"}], ",", "randomWord"}], 
                   "]"}], ",", "Bold", ",", " ", "48"}], "]"}], ",", 
                RowBox[{"Row", "[", 
                 RowBox[{"Table", "[", 
                  RowBox[{
                   RowBox[{"PopupMenu", "[", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"i", "=", "i"}], "}"}], ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"guessCharacters", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"\< \>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\< \>\"", ",", "36"}], "]"}]}], ",", 
                    RowBox[{"\"\<A\>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<A\>\"", ",", "36"}], "]"}]}], ",", 
                    RowBox[{"\"\<B\>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<B\>\"", ",", "36"}], "]"}]}], ",", 
                    RowBox[{"\"\<C\>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<C\>\"", ",", "36"}], "]"}]}], ",", 
                    RowBox[{"\"\<D\>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<D\>\"", ",", "36"}], "]"}]}], ",", 
                    RowBox[{"\"\<E\>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<E\>\"", ",", "36"}], "]"}]}], ",", 
                    RowBox[{"\"\<F\>\"", "->", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<F\>\"", ",", "36"}], "]"}]}]}], "}"}]}], 
                    "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", "7"}], "}"}]}], "]"}], "]"}]}], 
               "      ", "]"}], ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"checker", "&&", 
                 RowBox[{"(", 
                  RowBox[{"sc", "\[Equal]", "False"}], ")"}]}], ",", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{"\"\<The answer \>\"", ",", 
                    RowBox[{"Style", "[", 
                    RowBox[{
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"StringJoin", "[", "guessCharacters", "]"}], 
                    "]"}], ",", "Bold", ",", "36"}], "]"}], ",", 
                    "\"\< is \>\"", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"wordType", "\[Equal]", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"StringJoin", "[", "guessCharacters", "]"}], 
                    "]"}], "\[Equal]", 
                    RowBox[{"words", "[", 
                    RowBox[{"[", "w", "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"StringTrim", "[", 
                    RowBox[{"StringJoin", "[", "guessCharacters", "]"}], 
                    "]"}], "\[Equal]", "randomWord"}]}], "]"}], ",", 
                    "\"\<correct.\>\"", ",", "\"\<incorrect.\>\""}], "]"}]}], 
                    "}"}], "]"}], ",", "20"}], "]"}], " ", ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\< \>\"", ",", "20"}], "]"}]}], " ", "]"}], ","}],
              "\[IndentingNewLine]", "\[IndentingNewLine]", "}"}], "]"}]}], 
          "]"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"480", ",", "450"}], "}"}]}]}], "]"}]}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Item", "[", 
    RowBox[{
     RowBox[{"Row", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Button", "[", 
         RowBox[{"\"\<code 1\>\"", ",", 
          RowBox[{"f", "=", "1"}]}], "]"}], ",", 
        RowBox[{"Button", "[", 
         RowBox[{"\"\<code 2\>\"", ",", 
          RowBox[{"f", "=", "2"}]}], "]"}], ",", 
        RowBox[{"Button", "[", 
         RowBox[{"\"\<code 3\>\"", ",", 
          RowBox[{"f", "=", "3"}]}], "]"}], ",", 
        RowBox[{"Button", "[", 
         RowBox[{"\"\<code 4\>\"", ",", 
          RowBox[{"f", "=", "4"}]}], "]"}]}], "}"}], "]"}], ",", 
     RowBox[{"ControlPlacement", "\[Rule]", "Top"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"f", ",", "1"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"st", ",", "False", ",", "\"\<mode\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"True", "->", 
        RowBox[{"Column", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<show\>\"", ",", "\"\<steps\>\""}], "}"}], "]"}]}], ",", 
       RowBox[{"False", "\[Rule]", "\"\<decode\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "RadioButtonBar"}], ",", 
     RowBox[{"Appearance", "\[Rule]", "\"\<Vertical\>\""}]}], "}"}], ",", 
   "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<next step\>\"", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"step", "<", "5"}], ",", 
       RowBox[{"step", "=", 
        RowBox[{"step", "+", "1"}]}]}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "80"}], ",", 
     RowBox[{"Enabled", "\[Rule]", "st"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<previous step\>\"", ",", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"step", ">", "1"}], ",", 
       RowBox[{"step", "=", 
        RowBox[{"step", "-", "1"}]}]}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "80"}], ",", 
     RowBox[{"Enabled", "\[Rule]", "st"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<fixed word\>\"", ",", 
     RowBox[{
      RowBox[{"wordType", "=", "1"}], ";", 
      RowBox[{"wordLength", "=", 
       RowBox[{"StringLength", "[", 
        RowBox[{"words", "[", 
         RowBox[{"[", "w", "]"}], "]"}], "]"}]}], ";", 
      RowBox[{"checker", "=", "False"}], ";", 
      RowBox[{"guessCharacters", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", 
         ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\""}], "}"}]}]}], 
     ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"st", "\[Equal]", "False"}], ")"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "80"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w", ",", "1", ",", "\"\<word\>\""}], "}"}], ",", "1", ",", "9",
      ",", "1", ",", 
     RowBox[{"ControlType", "\[Rule]", "PopupMenu"}], ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"st", "\[Equal]", "False"}], "&&", 
        RowBox[{"wordType", "\[Equal]", "1"}]}], ")"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<random word\>\"", ",", 
     RowBox[{
      RowBox[{"rc", "=", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{"characters", ",", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "7"}], "}"}], "]"}]}], "]"}]}], ";", 
      RowBox[{"randomWord", "=", 
       RowBox[{"StringJoin", "[", "rc", "]"}]}], ";", 
      RowBox[{"wordType", "=", "2"}], ";", 
      RowBox[{"wordLength", "=", 
       RowBox[{"StringLength", "[", "randomWord", "]"}]}], ";", 
      RowBox[{"guessCharacters", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", 
         ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\""}], "}"}]}], ";", 
      RowBox[{"checker", "=", "False"}]}], ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"st", "\[Equal]", "False"}], ")"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "80"}]}], "]"}], ",", 
   "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<check answer\>\"", ",", 
     RowBox[{
      RowBox[{"checker", "=", "True"}], ";", 
      RowBox[{"displayedGuess", "=", "guess"}], ";", 
      RowBox[{"guess", "=", "\"\<\>\""}], ";", 
      RowBox[{"newGuess", "=", "False"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "80"}], ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"guessCharacters", "\[NotEqual]", 
        RowBox[{"{", 
         RowBox[{
         "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", 
          ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\""}], "}"}]}], 
       "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<try again\>\"", ",", 
     RowBox[{
      RowBox[{"newGuess", "=", "True"}], ";", 
      RowBox[{"checker", "=", "False"}], ";", 
      RowBox[{"guessCharacters", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", 
         ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\""}], "}"}]}]}], 
     ",", 
     RowBox[{"ImageSize", "\[Rule]", "80"}], ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"newGuess", "\[Equal]", "False"}], "]"}]}]}], "]"}], ",", 
   "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"checker", ",", "False"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"sc", ",", "False", ",", 
       RowBox[{"Column", "[", 
        RowBox[{"{", 
         RowBox[{"\"\<show\>\"", ",", "\"\<answer\>\""}], "}"}], "]"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"True", ",", "False"}], "}"}], ",", 
     RowBox[{"Enabled", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"st", "\[Equal]", "False"}], ")"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"step", ",", "1"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newGuess", ",", "True"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"wordType", ",", "1"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"guessCharacters", ",", 
       RowBox[{"{", 
        RowBox[{
        "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", 
         ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\""}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"wordLength", ",", "3"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"randomWord", ",", "\"\<i\>\""}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rc", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<A\>\"", ",", "\"\<C\>\""}], "}"}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"AutorunSequencing", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"TrackedSymbols", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
   
   RowBox[{"Initialization", "\[RuleDelayed]", 
    RowBox[{"(", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"characters", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<A\>\"", ",", "\"\<B\>\"", ",", "\"\<C\>\"", ",", "\"\<D\>\"", 
         ",", "\"\<E\>\"", ",", "\"\<F\>\""}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"frequencies", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          ".35", ",", ".1", ",", ".06", ",", ".2", ",", ".25", ",", ".04"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          ".3", ",", ".1", ",", ".1", ",", ".1", ",", ".3", ",", ".1"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          ".25", ",", ".1", ",", ".15", ",", ".1", ",", ".15", ",", ".25"}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
          ".125", ",", "0.051", ",", ".215", ",", ".173", ",", ".210", ",", 
           ".226"}], "}"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"digitizer", "[", "x_", "]"}], ":=", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{
         RowBox[{"ReplacePart", "[", 
          RowBox[{"x", ",", 
           RowBox[{"1", "\[Rule]", 
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"x", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", "\"\<0\>\""}], "]"}]}]}], 
          "]"}], ",", 
         RowBox[{"2", "\[Rule]", 
          RowBox[{"Append", "[", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "\"\<1\>\""}], "]"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"colorList", "=", 
       RowBox[{"{", 
        RowBox[{"Blue", ",", "Red", ",", 
         RowBox[{"Darker", "[", "Green", "]"}], ",", 
         RowBox[{"Darker", "[", 
          RowBox[{"Blue", ",", "0.8"}], "]"}], ",", 
         RowBox[{"Darker", "[", "Red", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"sorter", "[", "x_", "]"}], ":=", 
       RowBox[{"Sort", "[", 
        RowBox[{"x", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "<", 
           RowBox[{"#2", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"parentFinder", "=", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}]}], "}"}], ",", 
          
          RowBox[{"{", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{"StringJoin", "[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}]}], "}"}]}], 
         "}"}], "&"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"combiner", "[", "x_", "]"}], ":=", 
       RowBox[{"Prepend", "[", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"x", ",", "2"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"StringJoin", "[", 
            RowBox[{
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
             RowBox[{"x", "[", 
              RowBox[{"[", 
               RowBox[{"2", ",", "1"}], "]"}], "]"}]}], "]"}], ",", 
           RowBox[{
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "2"}], "]"}], "]"}], "+", 
            RowBox[{"x", "[", 
             RowBox[{"[", 
              RowBox[{"2", ",", "2"}], "]"}], "]"}]}]}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"comp2", "[", "x_", "]"}], ":=", 
       RowBox[{"sorter", "[", 
        RowBox[{"combiner", "[", "x", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"take1", "=", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"#", ",", "1"}], "]"}], "&"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"take2", "=", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"#", ",", "2"}], "]"}], "&"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"take2nd", "=", 
       RowBox[{
        RowBox[{"Take", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"drop2nd", "=", 
       RowBox[{
        RowBox[{"Drop", "[", 
         RowBox[{"#", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"getCharacters", "[", "x_", "]"}], ":=", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{"x", ",", 
         RowBox[{"1", "->", 
          RowBox[{"Characters", "[", 
           RowBox[{"x", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}]}], "  ", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"words", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<ACE\>\"", ",", "\"\<CAB\>\"", ",", "\"\<BEAD\>\"", ",", 
         "\"\<FEED\>\"", ",", "\"\<CAFE\>\"", ",", "\"\<FADED\>\"", ",", 
         "\"\<ABACAB\>\"", ",", "\"\<BADEFF\>\"", ",", "\"\<ACCEDED\>\""}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"rc", "=", 
       RowBox[{"RandomChoice", "[", 
        RowBox[{"characters", ",", 
         RowBox[{"RandomInteger", "[", 
          RowBox[{"{", 
           RowBox[{"3", ",", "7"}], "}"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"randomWord", "=", 
       RowBox[{"StringJoin", "[", "rc", "]"}]}]}], ")"}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.519982474390625*^9, {3.51998779690625*^9, 3.51998780715625*^9}, {
   3.5199916122410083`*^9, 3.5199918351742992`*^9}, {3.5199918954893303`*^9, 
   3.5199919062304044`*^9}, {3.5200062936875*^9, 3.520006315328125*^9}, {
   3.520006367625*^9, 3.520006402078125*^9}, {3.5200064546875*^9, 
   3.5200064673125*^9}, {3.52000650753125*^9, 3.520006510640625*^9}, {
   3.520006567203125*^9, 3.52000658934375*^9}, {3.520006629484375*^9, 
   3.520006633921875*^9}, {3.520006724296875*^9, 3.520006754484375*^9}, {
   3.520006830453125*^9, 3.520006856734375*^9}, {3.520006913203125*^9, 
   3.520006940296875*^9}, 3.520006988296875*^9, {3.520007034234375*^9, 
   3.5200070355625*^9}, {3.520007146203125*^9, 3.520007153859375*^9}, {
   3.520007268515625*^9, 3.520007292375*^9}, {3.5200073516875*^9, 
   3.520007373*^9}, {3.520007670515625*^9, 3.52000767871875*^9}, {
   3.5200077338125*^9, 3.52000773934375*^9}, {3.52000779603125*^9, 
   3.52000781171875*^9}, {3.520007876015625*^9, 3.520007878578125*^9}, {
   3.520007985515625*^9, 3.520007992609375*^9}, {3.520008232125*^9, 
   3.520008287765625*^9}, {3.520008441703125*^9, 3.5200084524375*^9}, {
   3.52000848640625*^9, 3.52000858890625*^9}, {3.52000881175*^9, 
   3.5200088771875*^9}, {3.5200092231875*^9, 3.5200093399375*^9}, {
   3.5200094713125*^9, 3.520009494578125*^9}, {3.520009643296875*^9, 
   3.520009655484375*^9}, {3.5200100526208477`*^9, 3.5200101167852635`*^9}, {
   3.5200101645870433`*^9, 3.5200102056911535`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`checker$$ = False, $CellContext`f$$ = 
    1, $CellContext`guessCharacters$$ = {
    " ", " ", " ", " ", " ", " ", " "}, $CellContext`newGuess$$ = 
    True, $CellContext`randomWord$$ = "DAF", $CellContext`rc$$ = {
    "D", "A", "F"}, $CellContext`sc$$ = False, $CellContext`st$$ = 
    False, $CellContext`step$$ = 1, $CellContext`w$$ = 
    1, $CellContext`wordLength$$ = 3, $CellContext`wordType$$ = 1, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Item[
        Row[{
          Button["code 1", $CellContext`f$$ = 1], 
          Button["code 2", $CellContext`f$$ = 2], 
          Button["code 3", $CellContext`f$$ = 3], 
          Button["code 4", $CellContext`f$$ = 4]}]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`f$$], 1}}, {{
       Hold[$CellContext`st$$], False, "mode"}, {
      True -> Column[{"show", "steps"}], False -> "decode"}}, {
      Hold[
       Button["next step", 
        If[$CellContext`step$$ < 
         5, $CellContext`step$$ = $CellContext`step$$ + 1], ImageSize -> 80, 
        Enabled -> $CellContext`st$$]], Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Button["previous step", 
        If[$CellContext`step$$ > 
         1, $CellContext`step$$ = $CellContext`step$$ - 1], ImageSize -> 80, 
        Enabled -> $CellContext`st$$]], Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Button[
       "fixed word", $CellContext`wordType$$ = 1; $CellContext`wordLength$$ = 
         StringLength[
           
           Part[$CellContext`words, $CellContext`w$$]]; \
$CellContext`checker$$ = 
         False; $CellContext`guessCharacters$$ = {
          " ", " ", " ", " ", " ", " ", " "}, 
        Enabled -> $CellContext`st$$ == False, ImageSize -> 80]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`w$$], 1, "word"}, 1, 9, 1}, {
      Hold[
       Button[
       "random word", $CellContext`rc$$ = 
         RandomChoice[$CellContext`characters, 
           RandomInteger[{3, 7}]]; $CellContext`randomWord$$ = 
         StringJoin[$CellContext`rc$$]; $CellContext`wordType$$ = 
         2; $CellContext`wordLength$$ = 
         StringLength[$CellContext`randomWord$$]; \
$CellContext`guessCharacters$$ = {
          " ", " ", " ", " ", " ", " ", " "}; $CellContext`checker$$ = False, 
        Enabled -> $CellContext`st$$ == False, ImageSize -> 80]], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Button[
       "check answer", $CellContext`checker$$ = 
         True; $CellContext`displayedGuess = $CellContext`guess; \
$CellContext`guess = ""; $CellContext`newGuess$$ = False, ImageSize -> 80, 
        Enabled -> Dynamic[$CellContext`guessCharacters$$ != {
           " ", " ", " ", " ", " ", " ", " "}]]], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Button[
       "try again", $CellContext`newGuess$$ = True; $CellContext`checker$$ = 
         False; $CellContext`guessCharacters$$ = {
          " ", " ", " ", " ", " ", " ", " "}, ImageSize -> 80, Enabled -> 
        Dynamic[$CellContext`newGuess$$ == False]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`checker$$], False}}, {{
       Hold[$CellContext`sc$$], False, 
       Column[{"show", "answer"}]}, {True, False}}, {{
       Hold[$CellContext`step$$], 1}}, {{
       Hold[$CellContext`newGuess$$], True}}, {{
       Hold[$CellContext`wordType$$], 1}}, {{
       Hold[$CellContext`guessCharacters$$], {
       " ", " ", " ", " ", " ", " ", " "}}}, {{
       Hold[$CellContext`wordLength$$], 3}}, {{
       Hold[$CellContext`randomWord$$], "DDE"}}, {{
       Hold[$CellContext`rc$$], {"D", "D", "E"}}}}, Typeset`size$$ = {
    480., {223., 229.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`st$6150$$ = 
    False, $CellContext`w$6151$$ = 0, $CellContext`sc$6152$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`checker$$ = False, $CellContext`f$$ = 
        1, $CellContext`guessCharacters$$ = {
         " ", " ", " ", " ", " ", " ", " "}, $CellContext`newGuess$$ = 
        True, $CellContext`randomWord$$ = 
        "DDE", $CellContext`rc$$ = {"D", "D", "E"}, $CellContext`sc$$ = 
        False, $CellContext`st$$ = False, $CellContext`step$$ = 
        1, $CellContext`w$$ = 1, $CellContext`wordLength$$ = 
        3, $CellContext`wordType$$ = 1}, "ControllerVariables" :> {
        Hold[$CellContext`st$$, $CellContext`st$6150$$, False], 
        Hold[$CellContext`w$$, $CellContext`w$6151$$, 0], 
        Hold[$CellContext`sc$$, $CellContext`sc$6152$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`digitizer2$, $CellContext`freqs$, \
$CellContext`freqTable$, $CellContext`tree$, $CellContext`revTree$, \
$CellContext`withDigits$, $CellContext`firstTwoWithDigits$, \
$CellContext`withCharacters$, $CellContext`withCharacters2$, \
$CellContext`code$, $CellContext`codeWfreq$, $CellContext`codeStrings$, \
$CellContext`colorCoder$, $CellContext`positions$, $CellContext`codedChars$, \
$CellContext`coded$, $CellContext`subTrees$, $CellContext`subCodes$, \
$CellContext`j$, $CellContext`digitizer3$, $CellContext`subTree$, \
$CellContext`revSubTree$, $CellContext`withDigitsSubTree$, \
$CellContext`firstTwoWithDigitsSubTree$, $CellContext`withCharactersSubTree$, \
$CellContext`subCode$}, 
        If[$CellContext`wordType$$ == 1, $CellContext`wordLength$$ = 
          StringLength[
            
            Part[$CellContext`words, $CellContext`w$$]], \
$CellContext`wordLength$$ = 
          StringLength[$CellContext`randomWord$$]]; $CellContext`digitizer2$[
           Pattern[$CellContext`x$, 
            Blank[]]] := ReplacePart[$CellContext`x$, 
           Flatten[
            Join[{1 -> Append[
                Part[$CellContext`x$, 1], 
                Style["0", Bold, 
                 Part[$CellContext`colorList, $CellContext`step$$]]], 2 -> 
              Append[
                Part[$CellContext`x$, 2], 
                Style["1", Bold, 
                 Part[$CellContext`colorList, $CellContext`step$$]]], 
              Table[$CellContext`i -> Append[
                 Part[$CellContext`x$, $CellContext`i], 
                 Style[" ", Bold]], {$CellContext`i, 3, 
                Length[$CellContext`x$]}]}]]]; $CellContext`freqs$ = 
         Part[$CellContext`frequencies, $CellContext`f$$]; \
$CellContext`freqTable$ = Table[{
            Part[$CellContext`characters, $CellContext`i], 
            Part[$CellContext`freqs$, $CellContext`i]}, {$CellContext`i, 1, 
            Length[$CellContext`characters]}]; $CellContext`tree$ = 
         NestList[$CellContext`comp2, 
           $CellContext`sorter[$CellContext`freqTable$], 
           5]; $CellContext`revTree$ = 
         Reverse[$CellContext`tree$]; $CellContext`withDigits$ = 
         Map[$CellContext`digitizer, 
           Drop[$CellContext`revTree$, 1]]; $CellContext`firstTwoWithDigits$ = 
         Map[$CellContext`drop2nd, 
           Map[$CellContext`take2, $CellContext`withDigits$], {
           2}]; $CellContext`withCharacters$ = 
         Map[$CellContext`getCharacters, $CellContext`firstTwoWithDigits$, {
           2}]; $CellContext`withCharacters2$ = 
         Flatten[$CellContext`withCharacters$, 1]; $CellContext`code$ = Table[{
            Part[$CellContext`characters, $CellContext`i], 
            StringJoin[
             Map[$CellContext`take2nd, 
              Select[$CellContext`withCharacters2$, MemberQ[
                Part[#, 1], 
                
                Part[$CellContext`characters, $CellContext`i]]& ]]]}, \
{$CellContext`i, 1, 
            Length[$CellContext`characters]}]; $CellContext`codeWfreq$ = 
         Table[{
            Part[$CellContext`characters, $CellContext`i], 
            Part[$CellContext`freqs$, $CellContext`i], 
            StringJoin[
             Map[$CellContext`take2nd, 
              Select[$CellContext`withCharacters2$, MemberQ[
                Part[#, 1], 
                
                Part[$CellContext`characters, $CellContext`i]]& ]]]}, \
{$CellContext`i, 1, 
            Length[$CellContext`characters]}]; $CellContext`codeStrings$ = 
         Flatten[
           Map[$CellContext`take2nd, $CellContext`code$], 1]; 
        If[$CellContext`wordType$$ == 1, $CellContext`chars = Characters[
            Part[$CellContext`words, $CellContext`w$$]], $CellContext`chars = 
          Characters[$CellContext`randomWord$$]]; $CellContext`colorCoder$ = 
         Table[
           If[
            EvenQ[$CellContext`j$], 
            ReplaceAll[
             Part[#, $CellContext`j$], Part[#, $CellContext`j$] -> Style[
               Part[#, $CellContext`j$], Blue]], 
            Part[#, $CellContext`j$]], {$CellContext`j$, 1, 
            Length[$CellContext`chars]}]& ; $CellContext`positions$ = 
         Flatten[
           Table[
            Position[$CellContext`characters, 
             Part[$CellContext`chars, $CellContext`i]], {$CellContext`i, 
             1, $CellContext`wordLength$$}]]; $CellContext`codedChars$ = 
         Flatten[
           Table[
            Take[$CellContext`codeStrings$, {
              
              Part[$CellContext`positions$, $CellContext`i]}], \
{$CellContext`i, 
             1, $CellContext`wordLength$$}]]; \
$CellContext`colorCoder$[$CellContext`codedChars$]; $CellContext`coded$ = 
         StringJoin[$CellContext`codedChars$]; $CellContext`subTrees$ = 
         Table[
           NestList[$CellContext`comp2, 
            $CellContext`sorter[$CellContext`freqTable$], $CellContext`i], \
{$CellContext`i, 1, 5}]; $CellContext`subCodes$ = {}; 
        For[$CellContext`j$ = 1, $CellContext`j$ <= 5, 
          Increment[$CellContext`j$], $CellContext`digitizer3$[
             Pattern[$CellContext`x$, 
              Blank[]]] := ReplacePart[$CellContext`x$, 
             Flatten[
              Table[
               Join[{{$CellContext`k, 1} -> Append[
                   Part[$CellContext`x$, $CellContext`k, 1], 
                   Style["0", Bold, 
                    
                    Part[$CellContext`colorList, $CellContext`j$ - \
$CellContext`k + 1]]], {$CellContext`k, 2} -> Append[
                   Part[$CellContext`x$, $CellContext`k, 2], 
                   Style["1", Bold, 
                    
                    Part[$CellContext`colorList, $CellContext`j$ - \
$CellContext`k + 1]]], 
                 Table[{$CellContext`k, $CellContext`i} -> Append[
                    Part[$CellContext`x$, $CellContext`i], 
                    Style[" ", Bold]], {$CellContext`i, 3, 
                   Length[$CellContext`x$]}]}], {$CellContext`k, 1, 
                Length[$CellContext`x$]}]]]; $CellContext`subTree$ = 
           Part[$CellContext`subTrees$, $CellContext`j$]; \
$CellContext`revSubTree$ = 
           Reverse[$CellContext`subTree$]; $CellContext`withDigitsSubTree$ = \
$CellContext`digitizer3$[
             
             Drop[$CellContext`revSubTree$, 
              1]]; $CellContext`firstTwoWithDigitsSubTree$ = 
           Map[$CellContext`drop2nd, 
             Map[$CellContext`take2, $CellContext`withDigitsSubTree$], {
             2}]; $CellContext`withCharactersSubTree$ = Flatten[
             
             Map[$CellContext`getCharacters, \
$CellContext`firstTwoWithDigitsSubTree$, {2}], 1]; $CellContext`subCode$ = 
           Table[{
              Part[$CellContext`characters, $CellContext`i], 
              Row[
               Flatten[
                Map[$CellContext`take2nd, 
                 Select[$CellContext`withCharactersSubTree$, MemberQ[
                   Part[#, 1], 
                   
                   Part[$CellContext`characters, $CellContext`i]]& ]]]]}, \
{$CellContext`i, 1, 
              Length[$CellContext`characters]}]; $CellContext`subCodes$ = 
           Append[$CellContext`subCodes$, $CellContext`subCode$]]; Text[
          Pane[
           If[$CellContext`st$$, 
            Column[{
              Style[
               
               Row[{"Step ", $CellContext`step$$, 
                 " of the procedure to find the Huffman code:"}], Bold, 18], 
              "", 
              Pane[
               Grid[{{
                  Style[
                   TableForm[
                    $CellContext`digitizer2$[
                    Part[$CellContext`tree$, $CellContext`step$$]], 
                    TableHeadings -> {
                    None, {"letters  ", "weight ", "digit"}}, 
                    TableSpacing -> {1, 0.8}], 20], 
                  Item[
                   Style[" \[Rule]  ", 20], Alignment -> Center], 
                  Style[
                   TableForm[
                    Part[$CellContext`tree$, $CellContext`step$$ + 1], 
                    TableHeadings -> {None, {"letters       ", "weight"}}, 
                    TableSpacing -> {1, 1/2}], 20]}}, 
                Alignment -> {Left, Top}], ImageSize -> {580, 200}], 
              Framed[
               Grid[{{
                  If[$CellContext`step$$ == 1, 
                   Style[
                    TableForm[
                    Table[{
                    Part[$CellContext`characters, $CellContext`i], 
                    ""}, {$CellContext`i, 1, 6}], 
                    TableHeadings -> {None, {"code", 
                    Row[{"before step ", $CellContext`step$$}]}}, 
                    TableSpacing -> {1, 0.25}], 20], 
                   Style[
                    TableForm[
                    Part[$CellContext`subCodes$, $CellContext`step$$ - 1], 
                    TableHeadings -> {None, {"code", 
                    Row[{"before step ", $CellContext`step$$}]}}, 
                    TableSpacing -> {1, 0.25}], 20]], 
                  Item[
                   Style[" \[Rule]  ", 20], Alignment -> Bottom], 
                  Style[
                   TableForm[
                    Part[$CellContext`subCodes$, $CellContext`step$$], 
                    TableHeadings -> {None, {"code", 
                    Row[{"after step ", $CellContext`step$$}]}}, 
                    TableSpacing -> {1, 0.25}], 20]}}]]}], 
            Column[{
              Style[
               
               TableForm[$CellContext`code$, 
                TableHeadings -> {None, {"letter", "code"}}], 20], "", "", 
              Style[
               Row[{"Decode this string:"}], 20], "", 
              If[$CellContext`sc$$, 
               Style[
                Row[
                 $CellContext`colorCoder$[$CellContext`codedChars$]], Bold, 
                36], 
               Style[$CellContext`coded$, Bold, 36]], "", 
              If[$CellContext`sc$$, 
               Style[
                If[$CellContext`wordType$$ == 1, 
                 
                 Part[$CellContext`words, $CellContext`w$$], \
$CellContext`randomWord$$], Bold, 48], 
               Row[
                Table[
                 PopupMenu[
                  With[{$CellContext`i$ = $CellContext`i}, 
                   Dynamic[
                    Part[$CellContext`guessCharacters$$, $CellContext`i$]]], {
                  " " -> Style[" ", 36], "A" -> Style["A", 36], "B" -> 
                   Style["B", 36], "C" -> Style["C", 36], "D" -> 
                   Style["D", 36], "E" -> Style["E", 36], "F" -> 
                   Style["F", 36]}], {$CellContext`i, 7}]]], "", 
              If[
               And[$CellContext`checker$$, $CellContext`sc$$ == False], 
               Style[
                Row[{"The answer ", 
                  Style[
                   StringTrim[
                    StringJoin[$CellContext`guessCharacters$$]], Bold, 36], 
                  " is ", 
                  If[
                   If[$CellContext`wordType$$ == 1, StringTrim[
                    StringJoin[$CellContext`guessCharacters$$]] == 
                    Part[$CellContext`words, $CellContext`w$$], StringTrim[
                    
                    StringJoin[$CellContext`guessCharacters$$]] == \
$CellContext`randomWord$$], "correct.", "incorrect."]}], 20], 
               Style[" ", 20]], Null}]], ImageSize -> {480, 450}]]], 
      "Specifications" :> {
        Item[
         Row[{
           Button["code 1", $CellContext`f$$ = 1], 
           Button["code 2", $CellContext`f$$ = 2], 
           Button["code 3", $CellContext`f$$ = 3], 
           Button["code 4", $CellContext`f$$ = 4]}], ControlPlacement -> 
         Top], {{$CellContext`f$$, 1}, ControlType -> 
         None}, {{$CellContext`st$$, False, "mode"}, {
         True -> Column[{"show", "steps"}], False -> "decode"}, ControlType -> 
         RadioButtonBar, Appearance -> "Vertical"}, Delimiter, 
        Button["next step", 
         If[$CellContext`step$$ < 
          5, $CellContext`step$$ = $CellContext`step$$ + 1], ImageSize -> 80, 
         Enabled -> $CellContext`st$$], 
        Button["previous step", 
         If[$CellContext`step$$ > 
          1, $CellContext`step$$ = $CellContext`step$$ - 1], ImageSize -> 80, 
         Enabled -> $CellContext`st$$], Delimiter, 
        Button[
        "fixed word", $CellContext`wordType$$ = 1; $CellContext`wordLength$$ = 
          StringLength[
            
            Part[$CellContext`words, $CellContext`w$$]]; \
$CellContext`checker$$ = 
          False; $CellContext`guessCharacters$$ = {
           " ", " ", " ", " ", " ", " ", " "}, 
         Enabled -> $CellContext`st$$ == False, ImageSize -> 
         80], {{$CellContext`w$$, 1, "word"}, 1, 9, 1, ControlType -> 
         PopupMenu, Enabled -> Dynamic[
           And[$CellContext`st$$ == False, $CellContext`wordType$$ == 1]]}, 
        Button[
        "random word", $CellContext`rc$$ = 
          RandomChoice[$CellContext`characters, 
            RandomInteger[{3, 7}]]; $CellContext`randomWord$$ = 
          StringJoin[$CellContext`rc$$]; $CellContext`wordType$$ = 
          2; $CellContext`wordLength$$ = 
          StringLength[$CellContext`randomWord$$]; \
$CellContext`guessCharacters$$ = {
           " ", " ", " ", " ", " ", " ", " "}; $CellContext`checker$$ = False,
          Enabled -> $CellContext`st$$ == False, ImageSize -> 80], Delimiter, 
        
        Button[
        "check answer", $CellContext`checker$$ = 
          True; $CellContext`displayedGuess = $CellContext`guess; \
$CellContext`guess = ""; $CellContext`newGuess$$ = False, ImageSize -> 80, 
         Enabled -> Dynamic[$CellContext`guessCharacters$$ != {
            " ", " ", " ", " ", " ", " ", " "}]], 
        Button[
        "try again", $CellContext`newGuess$$ = True; $CellContext`checker$$ = 
          False; $CellContext`guessCharacters$$ = {
           " ", " ", " ", " ", " ", " ", " "}, ImageSize -> 80, Enabled -> 
         Dynamic[$CellContext`newGuess$$ == False]], 
        Delimiter, {{$CellContext`checker$$, False}, ControlType -> 
         None}, {{$CellContext`sc$$, False, 
          Column[{"show", "answer"}]}, {True, False}, Enabled -> 
         Dynamic[$CellContext`st$$ == False]}, {{$CellContext`step$$, 1}, 
         ControlType -> None}, {{$CellContext`newGuess$$, True}, ControlType -> 
         None}, {{$CellContext`wordType$$, 1}, ControlType -> 
         None}, {{$CellContext`guessCharacters$$, {
          " ", " ", " ", " ", " ", " ", " "}}, ControlType -> 
         None}, {{$CellContext`wordLength$$, 3}, ControlType -> 
         None}, {{$CellContext`randomWord$$, "DDE"}, ControlType -> 
         None}, {{$CellContext`rc$$, {"D", "D", "E"}}, ControlType -> None}}, 
      "Options" :> {
       ControlPlacement -> Left, AutorunSequencing -> {2, 3}, TrackedSymbols -> 
        True}, "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{615., {267., 272.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>(($CellContext`characters = {
        "A", "B", "C", "D", "E", "F"}; $CellContext`frequencies = {{0.35, 0.1,
         0.06, 0.2, 0.25, 0.04}, {0.3, 0.1, 0.1, 0.1, 0.3, 0.1}, {0.25, 0.1, 
        0.15, 0.1, 0.15, 0.25}, {0.125, 0.051, 0.215, 0.173, 0.21, 
        0.226}}; $CellContext`digitizer[
         Pattern[$CellContext`x, 
          Blank[]]] := ReplacePart[
         ReplacePart[$CellContext`x, 1 -> Append[
            Part[$CellContext`x, 1], "0"]], 2 -> Append[
           Part[$CellContext`x, 2], "1"]]; $CellContext`colorList = {
        Blue, Red, 
         Darker[Green], 
         Darker[Blue, 0.8], 
         Darker[Red]}; $CellContext`sorter[
         Pattern[$CellContext`x, 
          Blank[]]] := 
       Sort[$CellContext`x, Part[#, 2] < 
         Part[#2, 2]& ]; $CellContext`parentFinder = {{
          Part[#, 1, 1], 
          StringJoin[
           Part[#, 1, 1], 
           Part[#, 2, 1]]}, {
          Part[#, 2, 1], 
          StringJoin[
           Part[#, 1, 1], 
           Part[#, 2, 1]]}}& ; $CellContext`combiner[
         Pattern[$CellContext`x, 
          Blank[]]] := Prepend[
         Drop[$CellContext`x, 2], {
          StringJoin[
           Part[$CellContext`x, 1, 1], 
           Part[$CellContext`x, 2, 1]], Part[$CellContext`x, 1, 2] + 
          Part[$CellContext`x, 2, 2]}]; $CellContext`comp2[
         Pattern[$CellContext`x, 
          Blank[]]] := $CellContext`sorter[
         $CellContext`combiner[$CellContext`x]]; $CellContext`take1 = 
       Take[#, 1]& ; $CellContext`take2 = Take[#, 2]& ; $CellContext`take2nd = 
       Take[#, {2}]& ; $CellContext`drop2nd = 
       Drop[#, {2}]& ; $CellContext`getCharacters[
         Pattern[$CellContext`x, 
          Blank[]]] := ReplacePart[$CellContext`x, 1 -> Characters[
           Part[$CellContext`x, 1]]]; $CellContext`words = {
        "ACE", "CAB", "BEAD", "FEED", "CAFE", "FADED", "ABACAB", "BADEFF", 
         "ACCEDED"}; $CellContext`rc$$ = RandomChoice[$CellContext`characters, 
         RandomInteger[{3, 7}]]; $CellContext`randomWord$$ = 
       StringJoin[$CellContext`rc$$]); Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellID->177706990],

Cell[CellGroupData[{

Cell["CAPTION", "Section",
 CellFrame->{{0, 0}, {1, 0}},
 CellFrameColor->RGBColor[0.87, 0.87, 0.87],
 FontFamily->"Helvetica",
 FontSize->12,
 FontWeight->"Bold",
 FontColor->RGBColor[0.597406, 0, 0.0527047]],

Cell["\<\
Huffman coding is a method of data compression that assigns shorter code \
words to those characters that occur with higher probability and longer code \
words to those characters that occur with lower probability. A Huffman code \
is an example of a prefix code\[LongDash]no character has a code word that is \
a prefix of another character's code word. In the \"show steps\" mode, this \
Demonstration illustrates the step-by-step procedure for finding the Huffman \
code for a set of characters with given probabilities. The \"decode\" mode \
gives the user an opportunity to decipher strings that have been encoded \
using the Huffman code.\
\>", "Text"]
}, Close]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DETAILS", "Section",
 CellFrame->{{0, 0}, {1, 0}},
 CellFrameColor->RGBColor[0.87, 0.87, 0.87],
 FontFamily->"Helvetica",
 FontSize->12,
 FontWeight->"Bold",
 FontColor->RGBColor[0.597406, 0, 0.0527047]],

Cell["\<\
To find the Huffman code for a given set of characters and probabilities, the \
characters are sorted by increasing probability (weight). The character with \
smallest probability is given a 0 and the character with the second smallest \
probability is given a 1. The two characters are concatenated, and their \
probabilities added. This new string and its weight then take the place of \
both characters and their weights. At each stage the newly assigned 0's and \
1's are prepended to the code strings already assigned to each letter in the \
corresponding string. This procedure is iterated until there is only one \
string with weight 1 (see the thumbnail and snapshots 1 and 2).\
\>", "Text"],

Cell["\<\
Four different codes are provided. All use the six characters A\[Dash]F, but \
have different probabilities assigned to the characters. In the decode mode, \
nine fixed words are included to make it easy to illustrate the different \
code words that the different codes give. The random word option will give a \
random string of length between 3 and 7, inclusive.\
\>", "Text"],

Cell["\<\
Use the popup menus to enter a \"guess\" for decoding a string.\
\>", "Text"]
}, Close]],

Cell["THIS NOTEBOOK IS THE SOURCE CODE FROM", "Text",
 CellFrame->{{0, 0}, {0, 0}},
 CellMargins->{{48, 10}, {4, 28}},
 CellGroupingRules->{"SectionGrouping", 25},
 CellFrameMargins->{{48, 48}, {6, 5}},
 CellFrameColor->RGBColor[0.87, 0.87, 0.87],
 FontFamily->"Helvetica",
 FontSize->10,
 FontWeight->"Bold",
 FontColor->RGBColor[0.597406, 0, 0.0527047]],

Cell[TextData[{
 "\[NonBreakingSpace]",
 ButtonBox["Marc Brodie",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/author.html?author=Marc+Brodie"], 
    None},
  ButtonNote->
   "http://demonstrations.wolfram.com/author.html?author=Marc+Brodie"]
}], "Text",
 CellMargins->{{48, Inherited}, {0, Inherited}},
 FontFamily->"Verdana",
 FontSize->10,
 FontColor->GrayLevel[0.6],
 CellID->87200162],

Cell[TextData[{
 "\"",
 ButtonBox["Huffman Coding",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/HuffmanCoding/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/HuffmanCoding/"],
 "\"",
 "\[ParagraphSeparator]\[NonBreakingSpace]",
 ButtonBox["http://demonstrations.wolfram.com/HuffmanCoding/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/HuffmanCoding/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/HuffmanCoding/"],
 "\[ParagraphSeparator]\[NonBreakingSpace]",
 ButtonBox["Wolfram Demonstrations Project",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/"],
 "\[ParagraphSeparator]\[NonBreakingSpace]",
 "Published: ",
 "July 26, 2011"
}], "Text",
 CellMargins->{{48, Inherited}, {0, Inherited}},
 FontFamily->"Verdana",
 FontSize->10,
 FontColor->GrayLevel[0.5]],

Cell[CellGroupData[{

Cell[TextData[{
 "A full-function Wolfram ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " system is required to edit this notebook.\n",
 StyleBox[ButtonBox["GET WOLFRAM MATHEMATICA \[RightGuillemet]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.wolfram.com/products/mathematica/"], None},
  ButtonNote->"http://www.wolfram.com/products/mathematica/"],
  FontFamily->"Helvetica",
  FontWeight->"Bold",
  FontSlant->"Italic",
  FontColor->RGBColor[1, 0.42, 0]]
}], "Text",
 CellFrame->True,
 CellMargins->{{48, 68}, {8, 28}},
 CellFrameMargins->12,
 CellFrameColor->RGBColor[0.87, 0.87, 0.87],
 CellChangeTimes->{3.3750111182355957`*^9},
 ParagraphSpacing->{1., 1.},
 FontFamily->"Verdana",
 FontSize->10,
 FontColor->GrayLevel[0.411765],
 Background->RGBColor[1, 1, 1]],

Cell[TextData[{
 "\[Copyright] ",
 StyleBox[ButtonBox["Wolfram Demonstrations Project & Contributors",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/"], None},
  ButtonNote->"http://demonstrations.wolfram.com/"],
  FontColor->GrayLevel[0.6]],
 "\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
 StyleBox[ButtonBox["Terms of Use",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/termsofuse.html"], None},
  ButtonNote->"http://demonstrations.wolfram.com/termsofuse.html"],
  FontColor->GrayLevel[0.6]],
 "\[ThickSpace]\[ThickSpace]\[ThickSpace]|\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
 StyleBox[ButtonBox["Make a new version of this Demonstration \
\[RightGuillemet]",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://demonstrations.wolfram.com/participate/upload.jsp?id=\
HuffmanCoding"], None},
  ButtonNote->None],
  FontColor->GrayLevel[0.6]]
}], "Text",
 CellFrame->{{0, 0}, {0, 0.5}},
 CellMargins->{{48, 10}, {20, 50}},
 CellFrameMargins->{{6, 0}, {6, 6}},
 CellFrameColor->GrayLevel[0.6],
 FontFamily->"Verdana",
 FontSize->9,
 FontColor->GrayLevel[0.6]]
}, Open  ]]
},
Editable->True,
Saveable->False,
ScreenStyleEnvironment->"Working",
CellInsertionPointCell->None,
WindowSize->{780, 650},
WindowMargins->{{Inherited, Inherited}, {Inherited, 0}},
WindowElements->{
 "StatusArea", "MemoryMonitor", "MagnificationPopUp", "VerticalScrollBar", 
  "MenuBar"},
WindowTitle->"Huffman Coding - Source",
DockedCells->{},
CellContext->Notebook,
FrontEndVersion->"8.0 for Microsoft Windows (32-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[616, 23, 134, 3, 70, "Section"],
Cell[753, 28, 3700, 64, 70, "Section"],
Cell[4456, 94, 44134, 1051, 70, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48627, 1150, 22647, 470, 70, "Output",
 CellID->177706990],
Cell[CellGroupData[{
Cell[71299, 1624, 209, 6, 70, "Section"],
Cell[71511, 1632, 668, 10, 70, "Text"]
}, Close]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72227, 1648, 209, 6, 70, "Section"],
Cell[72439, 1656, 709, 10, 70, "Text"],
Cell[73151, 1668, 388, 6, 70, "Text"],
Cell[73542, 1676, 87, 2, 70, "Text"]
}, Close]],
Cell[73643, 1681, 355, 9, 70, "Text",
 CellGroupingRules->{"SectionGrouping", 25}],
Cell[74001, 1692, 429, 14, 70, "Text",
 CellID->87200162],
Cell[74433, 1708, 965, 27, 70, "Text"],
Cell[CellGroupData[{
Cell[75423, 1739, 793, 24, 70, "Text"],
Cell[76219, 1765, 1185, 33, 70, "Text"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
(* NotebookSignature PRzJUPi5x96@cBTlKCBfnZQP *)
